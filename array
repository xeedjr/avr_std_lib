/**
 * @file	Array.h
 * @author	boy
 * @version 
 * @date	07 окт. 2014 г.
 * @brief
 */
#pragma once

#include <stdint.h>
#include <stddef.h>
#include <string.h>

#include "terminate.h"

namespace std {

template<typename T, uint8_t CAPASITY>
class array {
public:
	array()
	{
		///
	};
	~array()
	{};

	T & operator[] (const size_t & index) { return array_[index]; }
    const T & operator[] (const size_t & index) const { return array_[index]; }

	T& at (const size_t & index) { 
		if (index >= size_) {
			terminate();
		}
		return array_[index]; 
	}
    const T& at (const size_t & index) const { 
		if (index >= size_) {
			terminate();
		}
		return array_[index]; 
	}

	void push_back(T& val)
	{
		if (size_ == CAPASITY)
			terminate();

		array_[size_++] = val;
	};
	void append(T* begin, T* end)
	{
		size_t append_size = reinterpret_cast<uint8_t*>(end) - reinterpret_cast<uint8_t*>(begin);

		if ((size_ + append_size) > CAPASITY)
			terminate();

		memcpy(&array_[size_], begin, append_size);
		size_ += append_size;
	};
	size_t size()
	{
		return size_;
	};
	T* data()
	{
		return array_;
	};
private:
	T array_[CAPASITY];
	uint8_t size_ = 0;
};
}
